export interface BackitupNative {
    advancedDelete: boolean;
    cacheLoose: boolean;
    ccuCron: boolean;
    ccuCronJob: string;
    ccuDeleteAfter: number;
    ccuEnabled: boolean;
    ccuEvents: any[]; // Замените any на конкретный тип, если известен
    ccuEveryXDays: number;
    ccuHost: string;
    ccuMulti: boolean;
    ccuNameSuffix: string;
    ccuPassword: string;
    ccuSignedCertificates: boolean;
    ccuTime: string;
    ccuUsehttps: boolean;
    ccuUser: string;
    cifsCcuDir: string;
    cifsDeleteOldBackup: boolean;
    cifsDir: string;
    cifsDomain: string;
    cifsEnabled: boolean;
    cifsMinimalDir: string;
    cifsMount: string;
    cifsOwnDir: boolean;
    cifsUser: string;
    connectType: string;
    debugLevel: boolean;
    deleteOldDataBase: boolean;
    discordInstance: string;
    discordNoticeType: string;
    discordOnlyError: boolean;
    discordTarget: string;
    discordWaitToSend: number;
    dropboxAccessJson: string;
    dropboxAccessToken: string;
    dropboxCcuDir: string;
    dropboxCodeChallenge: string;
    dropboxDeleteAfter: number;
    dropboxDeleteOldBackup: boolean;
    dropboxDir: string;
    dropboxEnabled: boolean;
    dropboxMinimalDir: string;
    dropboxOwnDir: boolean;
    dropboxTokenType: string;
    emailInstance: string;
    emailNoticeType: string;
    emailOnlyError: boolean;
    emailReceiver: string;
    emailSender: string;
    emailWaitToSend: number;
    esphomeEnabled: boolean;
    expertMount: string;
    fileSizeError: number;
    fileSizeWarning: number;
    ftpCcuDir: string;
    ftpDeleteAfter: number;
    ftpDeleteOldBackup: boolean;
    ftpDir: string;
    ftpEnabled: boolean;
    ftpHost: string;
    ftpMinimalDir: string;
    ftpOwnDir: boolean;
    ftpPassword: string;
    ftpPort: number;
    ftpSecure: boolean;
    ftpSignedCertificates: boolean;
    ftpUser: string;
    googledriveAccessTokens: string;
    googledriveCcuDir: string;
    googledriveDeleteAfter: number;
    googledriveDeleteOldBackup: boolean;
    googledriveDir: string;
    googledriveEnabled: boolean;
    googledriveMinimalDir: string;
    googledriveOwnDir: boolean;
    gotifyInstance: string;
    gotifyNoticeType: string;
    gotifyOnlyError: boolean;
    gotifyWaitToSend: number;
    grafanaApiKey: string;
    grafanaEnabled: boolean;
    grafanaHost: string;
    grafanaPassword: string;
    grafanaPort: string;
    grafanaProtocol: string;
    grafanaSignedCertificates: boolean;
    grafanaUsername: string;
    historyEnabled: boolean;
    historyEntriesNumber: number;
    historyPath: string;
    hostType: string;
    ignoreErrors: boolean;
    influxDBDeleteAfter: number;
    influxDBDumpExe: string;
    influxDBEnabled: boolean;
    influxDBEvents: any[]; // Замените any на конкретный тип, если известен
    influxDBHost: string;
    influxDBMulti: boolean;
    influxDBName: string;
    influxDBPort: string;
    influxDBProtocol: string;
    influxDBToken: string;
    influxDBType: string;
    influxDBVersion: string;
    iobrokerCron: boolean;
    iobrokerCronJob: string;
    jarvisEnabled: boolean;
    javascriptsEnabled: boolean;
    macAd: string;
    matrixInstance: string;
    matrixNoticeType: string;
    matrixOnlyError: boolean;
    matrixWaitToSend: number;
    minimalDeleteAfter: number;
    minimalEnabled: boolean;
    minimalEveryXDays: number;
    minimalNameSuffix: string;
    minimalTime: string;
    mySqlDeleteAfter: number;
    mySqlDumpExe: string;
    mySqlEnabled: boolean;
    mySqlEvents: any[]; // Замените any на конкретный тип, если известен
    mySqlHost: string;
    mysqlMinimalEnabled: boolean;
    mySqlMulti: boolean;
    mySqlName: string;
    mySqlPassword: string;
    mySqlPort: string;
    mysqlQuick: boolean;
    mysqlSingleTransaction: boolean;
    mySqlUser: string;
    noderedEnabled: boolean;
    noserverino: boolean;
    notificationEnabled: boolean;
    notificationsType: string;
    onedriveAccessJson: string;
    onedriveCcuDir: string;
    onedriveDeleteAfter: number;
    onedriveDeleteOldBackup: boolean;
    onedriveDir: string;
    onedriveEnabled: boolean;
    onedriveLastTokenRenew: string;
    onedriveMinimalDir: string;
    onedriveOwnDir: boolean;
    pgSqlDeleteAfter: number;
    pgSqlDumpExe: string;
    pgSqlEnabled: boolean;
    pgSqlEvents: any[]; // Замените any на конкретный тип, если известен
    pgSqlHost: string;
    pgSqlMulti: boolean;
    pgSqlName: string;
    pgSqlPassword: string;
    pgSqlPort: string;
    pgSqlUser: string;
    pushoverDeviceID: string;
    pushoverInstance: string;
    pushoverNoticeType: string;
    pushoverOnlyError: boolean;
    pushoverSilentNotice: boolean;
    pushoverWaitToSend: number;
    redisAOFactive: boolean;
    redisEnabled: boolean;
    redisHost: string;
    redisMinimalEnabled: boolean;
    redisPassword: string;
    redisPath: string;
    redisPort: number;
    redisType: string;
    redisUser: string;
    restoreSource: string;
    restoreTab: boolean;
    signalInstance: string;
    signalNoticeType: string;
    signalOnlyError: boolean;
    signalWaitToSend: number;
    slaveInstance: string;
    slaveNameSuffix: string;
    smbType: string;
    sqliteDumpExe: string;
    sqliteEnabled: boolean;
    sqlitePath: string;
    startAllRestore: boolean;
    stopSlaveAfter: boolean;
    sudoMount: boolean;
    telegramInstance: string;
    telegramNoticeType: string;
    telegramOnlyError: boolean;
    telegramSilentNotice: boolean;
    telegramUser: string;
    telegramWaitToSend: number;
    wakeOnLAN: boolean;
    webdavCcuDir: string;
    webdavDeleteAfter: number;
    webdavDeleteOldBackup: boolean;
    webdavDir: string;
    webdavEnabled: boolean;
    webdavMinimalDir: string;
    webdavOwnDir: boolean;
    webdavPassword: string;
    webdavSignedCertificates: boolean;
    webdavURL: string;
    webdavUsername: string;
    whatsappInstance: string;
    whatsappNoticeType: string;
    whatsappOnlyError: boolean;
    whatsappWaitToSend: number;
    wolExtra: boolean;
    wolPort: number;
    wolWait: number;
    yahkaEnabled: boolean;
    zigbee2mqttEnabled: boolean;
    zigbee2mqttPath: string;
    zigbeeEnabled: boolean;
}

export interface ExecutionLine { level?: string; source?: string; ts?: string; text: string }